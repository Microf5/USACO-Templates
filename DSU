int parent[N];
int size[N];
int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}
void make_set(int v) {
    parent[v] = v;
    size[v] = 1;
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) {
        if (size[a] < size[b])
            swap(a, b);
        parent[b] = a;
        size[a] += size[b];
    }
}
//STRUCT VERSION DOWN HERE

struct uf{
    static const int MAXN=105;
    int par[MAXN];
    int size[MAXN];
    void init(){
        memset(par,-1,sizeof(par));
        for(int i= 0; i < MAXN;i++) size[i]=1;
    }
    int root(int a){
        if(par[a]==-1) return a;
        return par[a]=root(par[a]);
    }
    void unite(int a,int b){
        a=root(a);b=root(b);
        if(a==b) return;
        if(size[a]<size[b]) swap(a,b);

        par[b]=a;
        size[a]+=size[b];
    }
    bool same(int a,int b){
        return root(a)==root(b);
    }
};
uf u_[105];
