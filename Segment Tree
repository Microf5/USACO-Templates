#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
#include <string>
#include <unordered_map>
#include <map>
#include <set>
#include <queue>
#include <fstream>
using namespace std;
vector<long long> segtree;
int size = 1;
void init(int n){

    while(size < n)size *=2;
    segtree.resize(2*size,0);
}
void update(int i, int val, int x, int lx, int rx) {
    if (rx-lx==1) //i'm a leaf
    {
        segtree[x] = val;
        return;
    }
    int mid = (lx + rx) / 2;
    if(i < mid)update(i,val,2*x+1,lx,mid);
    else update(i,val,2*x+2,mid,rx);
    segtree[x] = segtree[2 * x+1] + segtree[2 * x + 2];
}
long long query(int l, int r, int x, int lx, int rx) {
    if (l >=rx || lx >= r)return 0;
    if (lx >= l && rx <= r)return segtree[x];
    int mid = (lx+rx) / 2;
    return query(l,r,2*x+1,lx,mid) + query(l,r,2*x+2,mid,rx);
}
int main(){
    int n,m; cin >> n >> m;
    vector<int> start(n);
    init(n);
    for(int i = 0; i < n; i++){
        cin >> start[i];
        update(i,start[i],0,0,size);
    }

    for(int i = 0; i < m; i++){
        int x; cin >> x;


        if(x==1){
            int i,v; cin >> i >> v;
            update(i,v,0,0,size);
        }
        else{
            int l,r; cin >> l >> r;

            cout << query(l,r,0,0,size) <<endl;
        }
    }
}
