int segtree[SIZE];
void build(int node, int start, int end, const vector<int>& x) {
	if (start == end) //i'm a leaf
	{
		segtree[node] = x[start];
		return;
	}
	int mid = (start + end) / 2;
	build(node * 2, start, mid, x);
	build(node * 2 + 1, mid + 1, end, x);
	segtree[node] = segtree[2 * node] + segtree[2 * node + 1];
}
void update(int node, int start, int end, int idx, int val) {
	if (start == end) //i'm a leaf
	{
		segtree[node] += val;
		return;
	}
	int mid = (start + end) / 2;
	if (idx >= start && idx <= mid) update(node * 2, start, mid, idx, val);
	
	else update(node * 2+1, mid+1,end, idx, val);
	segtree[node] = segtree[2 * node] + segtree[2 * node + 1];
}

int query(int node, int start, int end, int left, int right) {
	if (right < start || left > end)return 0;
	if (start >= left && end <= right)return segtree[node];
	int mid = (start + end) / 2;
	return query(node * 2, start, mid, left, right) + query(node * 2 + 1, mid + 1, end, left, right);
}
